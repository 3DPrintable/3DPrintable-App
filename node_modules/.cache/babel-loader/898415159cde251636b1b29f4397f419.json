{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _asyncToGenerator from\"/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/node_modules/@babel/runtime/regenerator/index.js\";import{useMoralisDapp}from\"providers/MoralisDappProvider/MoralisDappProvider\";import{useEffect,useState}from\"react\";import{useMoralisWeb3Api,useMoralisWeb3ApiCall}from\"react-moralis\";import{useIPFS}from\"./useIPFS\";export var useNFTBalance=function useNFTBalance(options){var _useMoralisWeb3Api=useMoralisWeb3Api(),account=_useMoralisWeb3Api.account;var _useMoralisDapp=useMoralisDapp(),chainId=_useMoralisDapp.chainId;var _useIPFS=useIPFS(),resolveLink=_useIPFS.resolveLink;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),NFTBalance=_useState2[0],setNFTBalance=_useState2[1];var _useMoralisWeb3ApiCal=useMoralisWeb3ApiCall(account.getNFTs,_objectSpread({chain:chainId},options)),getNFTBalance=_useMoralisWeb3ApiCal.fetch,data=_useMoralisWeb3ApiCal.data,error=_useMoralisWeb3ApiCal.error,isLoading=_useMoralisWeb3ApiCal.isLoading;var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),fetchSuccess=_useState4[0],setFetchSuccess=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var NFTs,_iterator,_step,_loop;return _regeneratorRuntime.wrap(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(data!==null&&data!==void 0&&data.result)){_context2.next=20;break;}NFTs=data.result;setFetchSuccess(true);_iterator=_createForOfIteratorHelper(NFTs);_context2.prev=4;_loop=/*#__PURE__*/_regeneratorRuntime.mark(function _loop(){var NFT,_NFT$metadata;return _regeneratorRuntime.wrap(function _loop$(_context){while(1){switch(_context.prev=_context.next){case 0:NFT=_step.value;if(!(NFT!==null&&NFT!==void 0&&NFT.metadata)){_context.next=6;break;}NFT.metadata=JSON.parse(NFT.metadata);NFT.image=resolveLink((_NFT$metadata=NFT.metadata)===null||_NFT$metadata===void 0?void 0:_NFT$metadata.image);_context.next=15;break;case 6:if(!(NFT!==null&&NFT!==void 0&&NFT.token_uri)){_context.next=15;break;}_context.prev=7;_context.next=10;return fetch(NFT.token_uri).then(function(response){return response.json();}).then(function(data){NFT.image=resolveLink(data.image);});case 10:_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](7);setFetchSuccess(false);case 15:case\"end\":return _context.stop();}}},_loop,null,[[7,12]]);});_iterator.s();case 7:if((_step=_iterator.n()).done){_context2.next=11;break;}return _context2.delegateYield(_loop(),\"t0\",9);case 9:_context2.next=7;break;case 11:_context2.next=16;break;case 13:_context2.prev=13;_context2.t1=_context2[\"catch\"](4);_iterator.e(_context2.t1);case 16:_context2.prev=16;_iterator.f();return _context2.finish(16);case 19:setNFTBalance(NFTs);case 20:case\"end\":return _context2.stop();}}},_callee,null,[[4,13,16,19]]);}));return _fetchData.apply(this,arguments);}fetchData();},// eslint-disable-next-line react-hooks/exhaustive-deps\n[data]);return{getNFTBalance:getNFTBalance,NFTBalance:NFTBalance,fetchSuccess:fetchSuccess,error:error,isLoading:isLoading};};","map":{"version":3,"sources":["/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/src/hooks/useNFTBalance.js"],"names":["useMoralisDapp","useEffect","useState","useMoralisWeb3Api","useMoralisWeb3ApiCall","useIPFS","useNFTBalance","options","account","chainId","resolveLink","NFTBalance","setNFTBalance","getNFTs","chain","getNFTBalance","fetch","data","error","isLoading","fetchSuccess","setFetchSuccess","fetchData","result","NFTs","NFT","metadata","JSON","parse","image","token_uri","then","response","json"],"mappings":"usBAAA,OAASA,cAAT,KAA+B,mDAA/B,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,iBAAT,CAA4BC,qBAA5B,KAAyD,eAAzD,CACA,OAASC,OAAT,KAAwB,WAAxB,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,OAAD,CAAa,CACxC,uBAAoBJ,iBAAiB,EAArC,CAAQK,OAAR,oBAAQA,OAAR,CACA,oBAAoBR,cAAc,EAAlC,CAAQS,OAAR,iBAAQA,OAAR,CACA,aAAwBJ,OAAO,EAA/B,CAAQK,WAAR,UAAQA,WAAR,CACA,cAAoCR,QAAQ,CAAC,EAAD,CAA5C,wCAAOS,UAAP,eAAmBC,aAAnB,eACA,0BAKIR,qBAAqB,CAACI,OAAO,CAACK,OAAT,gBAAoBC,KAAK,CAAEL,OAA3B,EAAuCF,OAAvC,EALzB,CACSQ,aADT,uBACEC,KADF,CAEEC,IAFF,uBAEEA,IAFF,CAGEC,KAHF,uBAGEA,KAHF,CAIEC,SAJF,uBAIEA,SAJF,CAMA,eAAwCjB,QAAQ,CAAC,IAAD,CAAhD,yCAAOkB,YAAP,eAAqBC,eAArB,eAEApB,SAAS,CAAC,UAAM,SACCqB,CAAAA,SADD,qIACd,0KACML,IADN,SACMA,IADN,WACMA,IAAI,CAAEM,MADZ,4BAEUC,IAFV,CAEiBP,IAAI,CAACM,MAFtB,CAGIF,eAAe,CAAC,IAAD,CAAf,CAHJ,qCAIoBG,IAJpB,oNAIaC,GAJb,kBAKUA,GALV,SAKUA,GALV,WAKUA,GAAG,CAAEC,QALf,0BAMQD,GAAG,CAACC,QAAJ,CAAeC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACC,QAAf,CAAf,CACAD,GAAG,CAACI,KAAJ,CAAYnB,WAAW,gBAACe,GAAG,CAACC,QAAL,wCAAC,cAAcG,KAAf,CAAvB,CAPR,mCAQiBJ,GARjB,SAQiBA,GARjB,WAQiBA,GAAG,CAAEK,SARtB,kEAUgBd,CAAAA,KAAK,CAACS,GAAG,CAACK,SAAL,CAAL,CACHC,IADG,CACE,SAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EADF,EAEHF,IAFG,CAEE,SAACd,IAAD,CAAU,CACdQ,GAAG,CAACI,KAAJ,CAAYnB,WAAW,CAACO,IAAI,CAACY,KAAN,CAAvB,CACD,CAJG,CAVhB,0FAgBUR,eAAe,CAAC,KAAD,CAAf,CAhBV,kaAoBIT,aAAa,CAACY,IAAD,CAAb,CApBJ,4EADc,4CAwBdF,SAAS,GACV,CAzBQ,CA0BP;AACF,CAACL,IAAD,CA3BS,CAAT,CA6BA,MAAO,CAAEF,aAAa,CAAbA,aAAF,CAAiBJ,UAAU,CAAVA,UAAjB,CAA6BS,YAAY,CAAZA,YAA7B,CAA2CF,KAAK,CAALA,KAA3C,CAAkDC,SAAS,CAATA,SAAlD,CAAP,CACD,CA3CM","sourcesContent":["import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useEffect, useState } from \"react\";\nimport { useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\nimport { useIPFS } from \"./useIPFS\";\n\nexport const useNFTBalance = (options) => {\n  const { account } = useMoralisWeb3Api();\n  const { chainId } = useMoralisDapp();\n  const { resolveLink } = useIPFS();\n  const [NFTBalance, setNFTBalance] = useState([]);\n  const {\n    fetch: getNFTBalance,\n    data,\n    error,\n    isLoading,\n  } = useMoralisWeb3ApiCall(account.getNFTs, { chain: chainId, ...options });\n  const [fetchSuccess, setFetchSuccess] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      if (data?.result) {\n        const NFTs = data.result;\n        setFetchSuccess(true);\n        for (let NFT of NFTs) {\n          if (NFT?.metadata) {\n            NFT.metadata = JSON.parse(NFT.metadata);\n            NFT.image = resolveLink(NFT.metadata?.image);\n          } else if (NFT?.token_uri) {\n            try {\n              await fetch(NFT.token_uri)\n                .then((response) => response.json())\n                .then((data) => {\n                  NFT.image = resolveLink(data.image);\n                });\n            } catch (error) {\n              setFetchSuccess(false);\n            }\n          }\n        }\n        setNFTBalance(NFTs);\n      }\n    }\n    fetchData()\n  }\n  , // eslint-disable-next-line react-hooks/exhaustive-deps\n  [data]);\n  \n  return { getNFTBalance, NFTBalance, fetchSuccess, error, isLoading };\n};\n"]},"metadata":{},"sourceType":"module"}