{"ast":null,"code":"import Moralis from 'moralis';\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nconst {\n  chainId\n} = useMoralisDapp();\n\nasync function uploadNFT(metadata) {\n  if (chainId !== '0x1') {\n    window.alert('Wrong network! Please switch to Ethereum.');\n    window.location.reload();\n    return;\n  }\n\n  window.alert(\"Confirm uploading data to Rarible by clicking OK. DON'T REFRESH THE PAGE!!!\");\n  const imageFile = new Moralis.File(metadata.image.name, metadata.image);\n  const stlFile = new Moralis.File(metadata.file.name, metadata.file, \"model/stl\");\n  await imageFile.saveIPFS();\n  await stlFile.saveIPFS();\n  let imageFileHash = imageFile.hash();\n  let stlFileHash = stlFile.hash();\n  let Metadata = {\n    name: metadata.name,\n    creator: metadata.creator,\n    category: metadata.category,\n    supply: metadata.supply,\n    description: metadata.description,\n    royalty: metadata.royalty,\n    image: \"/ipfs/\" + imageFileHash,\n    file: \"/ipfs/\" + stlFileHash\n  };\n  const jsonFile = new Moralis.File(\"Metadata.json\", {\n    base64: btoa(JSON.stringify(Metadata))\n  });\n  await jsonFile.saveIPFS();\n  let metadataHash = jsonFile.hash();\n  let res = await Moralis.Plugins.rarible.lazyMint({\n    chain: 'eth',\n    userAddress: user.get('ethAddress'),\n    tokenType: 'ERC1155',\n    tokenUri: 'ipfs://' + metadataHash,\n    supply: metadata.supply,\n    royaltiesAmount: metadata.royalty * 100\n  });\n\n  if (window.confirm('Click OK to list NFT on Rarible! ')) {\n    window.location.href = `https://rarible.com/token/${res.data.result.tokenAddress}:${res.data.result.tokenId}`;\n  }\n}\n\n;\nexport default uploadNFT;","map":{"version":3,"sources":["/Users/bryce_palichuk/Documents/GitHub/3DPrintable_Organization/3DPrintable-App/src/components/UploadNFT.jsx"],"names":["Moralis","useMoralisDapp","chainId","uploadNFT","metadata","window","alert","location","reload","imageFile","File","image","name","stlFile","file","saveIPFS","imageFileHash","hash","stlFileHash","Metadata","creator","category","supply","description","royalty","jsonFile","base64","btoa","JSON","stringify","metadataHash","res","Plugins","rarible","lazyMint","chain","userAddress","user","get","tokenType","tokenUri","royaltiesAmount","confirm","href","data","result","tokenAddress","tokenId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,cAAT,QAA+B,mDAA/B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,cAAc,EAAlC;;AAEA,eAAeE,SAAf,CAAyBC,QAAzB,EAAkC;AAE9B,MAAIF,OAAO,KAAK,KAAhB,EAAuB;AACrBG,IAAAA,MAAM,CAACC,KAAP,CAAa,2CAAb;AACAD,IAAAA,MAAM,CAACE,QAAP,CAAgBC,MAAhB;AACA;AACD;;AAEDH,EAAAA,MAAM,CAACC,KAAP,CAAa,6EAAb;AAEA,QAAMG,SAAS,GAAG,IAAIT,OAAO,CAACU,IAAZ,CAAiBN,QAAQ,CAACO,KAAT,CAAeC,IAAhC,EAAsCR,QAAQ,CAACO,KAA/C,CAAlB;AACA,QAAME,OAAO,GAAG,IAAIb,OAAO,CAACU,IAAZ,CAAiBN,QAAQ,CAACU,IAAT,CAAcF,IAA/B,EAAqCR,QAAQ,CAACU,IAA9C,EAAoD,WAApD,CAAhB;AACA,QAAML,SAAS,CAACM,QAAV,EAAN;AACA,QAAMF,OAAO,CAACE,QAAR,EAAN;AACA,MAAIC,aAAa,GAAGP,SAAS,CAACQ,IAAV,EAApB;AACA,MAAIC,WAAW,GAAGL,OAAO,CAACI,IAAR,EAAlB;AAEA,MAAIE,QAAQ,GAAG;AACbP,IAAAA,IAAI,EAAER,QAAQ,CAACQ,IADF;AAEbQ,IAAAA,OAAO,EAAEhB,QAAQ,CAACgB,OAFL;AAGbC,IAAAA,QAAQ,EAAEjB,QAAQ,CAACiB,QAHN;AAIbC,IAAAA,MAAM,EAAElB,QAAQ,CAACkB,MAJJ;AAKbC,IAAAA,WAAW,EAAEnB,QAAQ,CAACmB,WALT;AAMbC,IAAAA,OAAO,EAAEpB,QAAQ,CAACoB,OANL;AAObb,IAAAA,KAAK,EAAE,WAAWK,aAPL;AAQbF,IAAAA,IAAI,EAAE,WAAWI;AARJ,GAAf;AAWA,QAAMO,QAAQ,GAAG,IAAIzB,OAAO,CAACU,IAAZ,CAAiB,eAAjB,EAAkC;AAACgB,IAAAA,MAAM,EAAGC,IAAI,CAACC,IAAI,CAACC,SAAL,CAAeV,QAAf,CAAD;AAAd,GAAlC,CAAjB;AACA,QAAMM,QAAQ,CAACV,QAAT,EAAN;AAEA,MAAIe,YAAY,GAAGL,QAAQ,CAACR,IAAT,EAAnB;AAEA,MAAIc,GAAG,GAAG,MAAM/B,OAAO,CAACgC,OAAR,CAAgBC,OAAhB,CAAwBC,QAAxB,CAAiC;AAC/CC,IAAAA,KAAK,EAAE,KADwC;AAE/CC,IAAAA,WAAW,EAAEC,IAAI,CAACC,GAAL,CAAS,YAAT,CAFkC;AAG/CC,IAAAA,SAAS,EAAE,SAHoC;AAI/CC,IAAAA,QAAQ,EAAE,YAAYV,YAJyB;AAK/CR,IAAAA,MAAM,EAAElB,QAAQ,CAACkB,MAL8B;AAM/CmB,IAAAA,eAAe,EAAErC,QAAQ,CAACoB,OAAT,GAAmB;AANW,GAAjC,CAAhB;;AASA,MAAInB,MAAM,CAACqC,OAAP,CAAe,mCAAf,CAAJ,EACA;AAACrC,IAAAA,MAAM,CAACE,QAAP,CAAgBoC,IAAhB,GAAsB,6BAA4BZ,GAAG,CAACa,IAAJ,CAASC,MAAT,CAAgBC,YAAa,IAAGf,GAAG,CAACa,IAAJ,CAASC,MAAT,CAAgBE,OAAQ,EAA1G;AAA4G;AAChH;;AAAA;AAED,eAAe5C,SAAf","sourcesContent":["import Moralis from 'moralis';\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\n\nconst { chainId } = useMoralisDapp();\n\nasync function uploadNFT(metadata){\n    \n    if (chainId !== '0x1') {\n      window.alert('Wrong network! Please switch to Ethereum.')\n      window.location.reload()\n      return\n    }\n\n    window.alert(\"Confirm uploading data to Rarible by clicking OK. DON'T REFRESH THE PAGE!!!\")\n\n    const imageFile = new Moralis.File(metadata.image.name, metadata.image)\n    const stlFile = new Moralis.File(metadata.file.name, metadata.file, \"model/stl\")\n    await imageFile.saveIPFS();\n    await stlFile.saveIPFS();\n    let imageFileHash = imageFile.hash();\n    let stlFileHash = stlFile.hash();\n\n    let Metadata = {\n      name: metadata.name,\n      creator: metadata.creator,\n      category: metadata.category,\n      supply: metadata.supply,\n      description: metadata.description,\n      royalty: metadata.royalty,\n      image: \"/ipfs/\" + imageFileHash,\n      file: \"/ipfs/\" + stlFileHash\n    }\n\n    const jsonFile = new Moralis.File(\"Metadata.json\", {base64 : btoa(JSON.stringify(Metadata))}); \n    await jsonFile.saveIPFS();\n\n    let metadataHash = jsonFile.hash();\n\n    let res = await Moralis.Plugins.rarible.lazyMint({\n      chain: 'eth',\n      userAddress: user.get('ethAddress'),\n      tokenType: 'ERC1155',\n      tokenUri: 'ipfs://' + metadataHash,\n      supply: metadata.supply,\n      royaltiesAmount: metadata.royalty * 100 \n    })\n\n    if (window.confirm('Click OK to list NFT on Rarible! ')) \n    {window.location.href=`https://rarible.com/token/${res.data.result.tokenAddress}:${res.data.result.tokenId}`}\n};\n\nexport default uploadNFT;"]},"metadata":{},"sourceType":"module"}