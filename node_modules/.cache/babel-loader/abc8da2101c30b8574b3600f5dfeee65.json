{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useEffect, useState } from \"react\";\nimport { useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\nimport { useIPFS } from \"./useIPFS\";\nexport const useNFTBalance = options => {\n  _s();\n\n  const {\n    account\n  } = useMoralisWeb3Api();\n  const {\n    chainId\n  } = useMoralisDapp();\n  const {\n    resolveLink\n  } = useIPFS();\n  const [NFTBalance, setNFTBalance] = useState([]);\n  const {\n    fetch: getNFTBalance,\n    data,\n    error,\n    isLoading\n  } = useMoralisWeb3ApiCall(account.getNFTs, {\n    chain: chainId,\n    ...options\n  });\n  const [fetchSuccess, setFetchSuccess] = useState(true);\n  useEffect(() => {\n    async function fetchData() {\n      if (data !== null && data !== void 0 && data.result) {\n        const NFTs = data.result;\n        setFetchSuccess(true);\n\n        for (let NFT of NFTs) {\n          if (NFT !== null && NFT !== void 0 && NFT.metadata) {\n            var _NFT$metadata;\n\n            NFT.metadata = JSON.parse(NFT.metadata);\n            NFT.image = resolveLink((_NFT$metadata = NFT.metadata) === null || _NFT$metadata === void 0 ? void 0 : _NFT$metadata.image);\n          } else if (NFT !== null && NFT !== void 0 && NFT.token_uri) {\n            try {\n              await fetch(NFT.token_uri).then(response => response.json()).then(data => {\n                NFT.image = resolveLink(data.image);\n              });\n            } catch (error) {\n              setFetchSuccess(false);\n            }\n          }\n        }\n\n        setNFTBalance(NFTs);\n      }\n    }\n\n    fetchData();\n  }, [data]);\n  return {\n    getNFTBalance,\n    NFTBalance,\n    fetchSuccess,\n    error,\n    isLoading\n  };\n};\n\n_s(useNFTBalance, \"219qqi4uKcewZowi8Hn9ROK37hU=\", false, function () {\n  return [useMoralisWeb3Api, useMoralisDapp, useIPFS, useMoralisWeb3ApiCall];\n});","map":{"version":3,"sources":["/Users/bryce_palichuk/Documents/GitHub/3DPrintable_Organization/3DPrintable-App/src/hooks/useNFTBalance.js"],"names":["useMoralisDapp","useEffect","useState","useMoralisWeb3Api","useMoralisWeb3ApiCall","useIPFS","useNFTBalance","options","account","chainId","resolveLink","NFTBalance","setNFTBalance","fetch","getNFTBalance","data","error","isLoading","getNFTs","chain","fetchSuccess","setFetchSuccess","fetchData","result","NFTs","NFT","metadata","JSON","parse","image","token_uri","then","response","json"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,mDAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,eAAzD;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAAA;;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAcL,iBAAiB,EAArC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAcT,cAAc,EAAlC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBL,OAAO,EAA/B;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AACJW,IAAAA,KAAK,EAAEC,aADH;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFb,qBAAqB,CAACI,OAAO,CAACU,OAAT,EAAkB;AAAEC,IAAAA,KAAK,EAAEV,OAAT;AAAkB,OAAGF;AAArB,GAAlB,CALzB;AAMA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,IAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeqB,SAAf,GAA2B;AACzB,UAAIP,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEQ,MAAV,EAAkB;AAChB,cAAMC,IAAI,GAAGT,IAAI,CAACQ,MAAlB;AACAF,QAAAA,eAAe,CAAC,IAAD,CAAf;;AACA,aAAK,IAAII,GAAT,IAAgBD,IAAhB,EAAsB;AACpB,cAAIC,GAAJ,aAAIA,GAAJ,eAAIA,GAAG,CAAEC,QAAT,EAAmB;AAAA;;AACjBD,YAAAA,GAAG,CAACC,QAAJ,GAAeC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACC,QAAf,CAAf;AACAD,YAAAA,GAAG,CAACI,KAAJ,GAAYnB,WAAW,kBAACe,GAAG,CAACC,QAAL,kDAAC,cAAcG,KAAf,CAAvB;AACD,WAHD,MAGO,IAAIJ,GAAJ,aAAIA,GAAJ,eAAIA,GAAG,CAAEK,SAAT,EAAoB;AACzB,gBAAI;AACF,oBAAMjB,KAAK,CAACY,GAAG,CAACK,SAAL,CAAL,CACHC,IADG,CACGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADhB,EAEHF,IAFG,CAEGhB,IAAD,IAAU;AACdU,gBAAAA,GAAG,CAACI,KAAJ,GAAYnB,WAAW,CAACK,IAAI,CAACc,KAAN,CAAvB;AACD,eAJG,CAAN;AAKD,aAND,CAME,OAAOb,KAAP,EAAc;AACdK,cAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF;AACF;;AACDT,QAAAA,aAAa,CAACY,IAAD,CAAb;AACD;AACF;;AACDF,IAAAA,SAAS;AACV,GAzBQ,EA0BP,CAACP,IAAD,CA1BO,CAAT;AA4BA,SAAO;AAAED,IAAAA,aAAF;AAAiBH,IAAAA,UAAjB;AAA6BS,IAAAA,YAA7B;AAA2CJ,IAAAA,KAA3C;AAAkDC,IAAAA;AAAlD,GAAP;AACD,CA1CM;;GAAMX,a;UACSH,iB,EACAH,c,EACIK,O,EAOpBD,qB","sourcesContent":["import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useEffect, useState } from \"react\";\nimport { useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\nimport { useIPFS } from \"./useIPFS\";\n\nexport const useNFTBalance = (options) => {\n  const { account } = useMoralisWeb3Api();\n  const { chainId } = useMoralisDapp();\n  const { resolveLink } = useIPFS();\n  const [NFTBalance, setNFTBalance] = useState([]);\n  const {\n    fetch: getNFTBalance,\n    data,\n    error,\n    isLoading,\n  } = useMoralisWeb3ApiCall(account.getNFTs, { chain: chainId, ...options });\n  const [fetchSuccess, setFetchSuccess] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      if (data?.result) {\n        const NFTs = data.result;\n        setFetchSuccess(true);\n        for (let NFT of NFTs) {\n          if (NFT?.metadata) {\n            NFT.metadata = JSON.parse(NFT.metadata);\n            NFT.image = resolveLink(NFT.metadata?.image);\n          } else if (NFT?.token_uri) {\n            try {\n              await fetch(NFT.token_uri)\n                .then((response) => response.json())\n                .then((data) => {\n                  NFT.image = resolveLink(data.image);\n                });\n            } catch (error) {\n              setFetchSuccess(false);\n            }\n          }\n        }\n        setNFTBalance(NFTs);\n      }\n    }\n    fetchData()\n  }\n  , [data]);\n\n  return { getNFTBalance, NFTBalance, fetchSuccess, error, isLoading };\n};\n"]},"metadata":{},"sourceType":"module"}