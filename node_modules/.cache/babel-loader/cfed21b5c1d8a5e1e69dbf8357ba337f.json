{"ast":null,"code":"import _objectSpread from\"/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{getNativeByChain}from\"helpers/networks\";import{useMoralisDapp}from\"providers/MoralisDappProvider/MoralisDappProvider\";import{useEffect,useMemo,useState}from\"react\";import{useMoralis,useMoralisWeb3Api,useMoralisWeb3ApiCall}from\"react-moralis\";export var useNativeBalance=function useNativeBalance(options){var _useMoralisWeb3Api=useMoralisWeb3Api(),account=_useMoralisWeb3Api.account;var _useMoralis=useMoralis(),Moralis=_useMoralis.Moralis;var _useMoralisDapp=useMoralisDapp(),chainId=_useMoralisDapp.chainId,walletAddress=_useMoralisDapp.walletAddress;var _useState=useState({inWei:0,formatted:0}),_useState2=_slicedToArray(_useState,2),balance=_useState2[0],setBalance=_useState2[1];var nativeName=useMemo(function(){return getNativeByChain((options===null||options===void 0?void 0:options.chain)||chainId);},[options,chainId]);var _useMoralisWeb3ApiCal=useMoralisWeb3ApiCall(account.getNativeBalance,_objectSpread({chain:chainId,address:walletAddress},options)),getBalance=_useMoralisWeb3ApiCal.fetch,data=_useMoralisWeb3ApiCal.data,error=_useMoralisWeb3ApiCal.error,isLoading=_useMoralisWeb3ApiCal.isLoading;useEffect(function(){if(data!==null&&data!==void 0&&data.balance){var balances={inWei:data.balance,// missing second argument (decimals) in FromWei function,\nformatted:Moralis.Units.FromWei(data.balance)};setBalance(balances);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[data]);return{getBalance:getBalance,balance:balance,nativeName:nativeName,error:error,isLoading:isLoading};};","map":{"version":3,"sources":["/Users/ethor/Documents/GitHub/DAPPS/3DPrintable-App/src/hooks/useNativeBalance.js"],"names":["getNativeByChain","useMoralisDapp","useEffect","useMemo","useState","useMoralis","useMoralisWeb3Api","useMoralisWeb3ApiCall","useNativeBalance","options","account","Moralis","chainId","walletAddress","inWei","formatted","balance","setBalance","nativeName","chain","getNativeBalance","address","getBalance","fetch","data","error","isLoading","balances","Units","FromWei"],"mappings":"iRAAA,OAASA,gBAAT,KAAiC,kBAAjC,CACA,OAASC,cAAT,KAA+B,mDAA/B,CACA,OAASC,SAAT,CAAoBC,OAApB,CAA6BC,QAA7B,KAA6C,OAA7C,CACA,OAASC,UAAT,CAAqBC,iBAArB,CAAwCC,qBAAxC,KAAqE,eAArE,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAa,CAC3C,uBAAoBH,iBAAiB,EAArC,CAAQI,OAAR,oBAAQA,OAAR,CACA,gBAAoBL,UAAU,EAA9B,CAAQM,OAAR,aAAQA,OAAR,CACA,oBAAmCV,cAAc,EAAjD,CAAQW,OAAR,iBAAQA,OAAR,CAAiBC,aAAjB,iBAAiBA,aAAjB,CACA,cAA8BT,QAAQ,CAAC,CAAEU,KAAK,CAAE,CAAT,CAAYC,SAAS,CAAE,CAAvB,CAAD,CAAtC,wCAAOC,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,UAAU,CAAGf,OAAO,CAAC,iBAAMH,CAAAA,gBAAgB,CAAC,CAAAS,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,CAAEU,KAAT,GAAkBP,OAAnB,CAAtB,EAAD,CAAoD,CAACH,OAAD,CAAUG,OAAV,CAApD,CAA1B,CAEA,0BAKIL,qBAAqB,CAACG,OAAO,CAACU,gBAAT,gBACvBD,KAAK,CAAEP,OADgB,CAEvBS,OAAO,CAAER,aAFc,EAGpBJ,OAHoB,EALzB,CACSa,UADT,uBACEC,KADF,CAEEC,IAFF,uBAEEA,IAFF,CAGEC,KAHF,uBAGEA,KAHF,CAIEC,SAJF,uBAIEA,SAJF,CAWAxB,SAAS,CAAC,UAAM,CACd,GAAIsB,IAAJ,SAAIA,IAAJ,WAAIA,IAAI,CAAER,OAAV,CAAmB,CACjB,GAAMW,CAAAA,QAAQ,CAAG,CACfb,KAAK,CAAEU,IAAI,CAACR,OADG,CAEf;AACAD,SAAS,CAAEJ,OAAO,CAACiB,KAAR,CAAcC,OAAd,CAAsBL,IAAI,CAACR,OAA3B,CAHI,CAAjB,CAKAC,UAAU,CAACU,QAAD,CAAV,CACD,CACD;AACD,CAVQ,CAUN,CAACH,IAAD,CAVM,CAAT,CAYA,MAAO,CAAEF,UAAU,CAAVA,UAAF,CAAcN,OAAO,CAAPA,OAAd,CAAuBE,UAAU,CAAVA,UAAvB,CAAmCO,KAAK,CAALA,KAAnC,CAA0CC,SAAS,CAATA,SAA1C,CAAP,CACD,CAhCM","sourcesContent":["import { getNativeByChain } from \"helpers/networks\";\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useMoralis, useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\n\nexport const useNativeBalance = (options) => {\n  const { account } = useMoralisWeb3Api();\n  const { Moralis } = useMoralis();\n  const { chainId, walletAddress } = useMoralisDapp();\n  const [balance, setBalance] = useState({ inWei: 0, formatted: 0 });\n\n  const nativeName = useMemo(() => getNativeByChain(options?.chain || chainId), [options, chainId]);\n\n  const {\n    fetch: getBalance,\n    data,\n    error,\n    isLoading,\n  } = useMoralisWeb3ApiCall(account.getNativeBalance, {\n    chain: chainId,\n    address: walletAddress,\n    ...options,\n  });\n\n  useEffect(() => {\n    if (data?.balance) {\n      const balances = {\n        inWei: data.balance,\n        // missing second argument (decimals) in FromWei function,\n        formatted: Moralis.Units.FromWei(data.balance),\n      };\n      setBalance(balances);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return { getBalance, balance, nativeName, error, isLoading };\n};\n"]},"metadata":{},"sourceType":"module"}